/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import vista.paneles.directivo.PanelCursos;
import vista.paneles.directivo.PanelRutasEstudiantes;
import vista.paneles.directivo.PanelPersonas;
import vista.paneles.directivo.PanelEPS;
import vista.paneles.directivo.PanelRutas;
import vista.paneles.estudiante.PanelEstudiante;
import vista.paneles.directivo.PanelAreaMateria;
import vista.paneles.PanelPrincipal;
import vista.paneles.directivo.PanelAcudienteEstudiante;
import vista.paneles.directivo.PanelDepartamentos;
import vista.paneles.directivo.PanelDirectivo;
import vista.dialog.VentanaDialog;
import vista.paneles.menu.MenuDirectivo;
import vista.interfaces.IMenu;
import controlador.logica.GestionActividades;
import controlador.logica.GestionArea;
import controlador.logica.GestionCursos;
import controlador.logica.GestionDepartamento;
import controlador.logica.GestionEpsSalud;
import controlador.logica.GestionMaterias;
import controlador.logica.GestionNotas;
import controlador.logica.GestionPersonas;
import controlador.logica.GestionRutas;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UIManager;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import modelo.Acudiente;
import modelo.Area;
import modelo.Curso;
import modelo.Departamento;
import modelo.Deuda;
import modelo.Direccion;
import modelo.Directivo;
import modelo.Docente;
import modelo.EPS;
import modelo.Estudiante;
import modelo.Materia;
import modelo.MateriaBase;
import modelo.Persona;
import modelo.PersonalServicio;
import modelo.Ruta;
import vista.paneles.directivo.PanelDeudas;
import vista.paneles.disenio.ButtonMaterialDesign;
import vista.paneles.disenio.ComboBoxMaterialDesign;
import vista.paneles.disenio.DialogMaterialDesign;
import vista.paneles.disenio.ListMaterialDesign;
import vista.paneles.disenio.TabbedPaneMaterialDesing;
import vista.paneles.disenio.TableMaterialDesign;
import vista.paneles.disenio.TextPaneMaterialDesign;

/**
 *
 * @author Carlos
 */
public class Principal extends javax.swing.JFrame implements IMenu{

    private PanelPrincipal panelPrincipal;
    private PanelEstudiante panelEstudiante;
    private PanelDirectivo panelDirectivo;
    private PanelPersonas panelPersonas;
    private PanelCursos panelCursos;
    private PanelAreaMateria panelAreaMaterias;
    private VentanaDialog ventanaDialog;
    private PanelDepartamentos panelDepartamento;
    private PanelAcudienteEstudiante panelAcudienteEstudiante;
    private PanelRutas panelRutas;
    private PanelRutasEstudiantes panelRutasEstudiantes;
    private PanelEPS panelEPS;
    private PanelDeudas panelDeudas;
    
    //MENUS
    private MenuDirectivo menuDirectivo;
    
    private GestionPersonas<Persona> gestionPersonas;
    private GestionDepartamento gestionDepartamento;
    private GestionCursos gestionCursos;
    private GestionActividades gestionActividades;
    private GestionNotas gestionNotas;
    private GestionMaterias gestionMaterias;
    private GestionArea gestionAreas;
    private GestionRutas gestionRutas;
    private GestionEpsSalud gestionEpsSalud;
    
    private Timer timer;
    /**
     * Creates new form Principal
     */
    public Principal() {
        iniciarTimer();
        instanciarControladores();
        cargarEstilos();
        ponerFondoDefecto();        
        initComponents();
        prepararVentana();
        irAPrincipal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMenu = new javax.swing.JPanel();
        jPanelPrincipal = new javax.swing.JScrollPane();
        jPanelBar = new javax.swing.JPanel();
        jLabelLogOut = new javax.swing.JLabel();
        jLabelOpciones = new javax.swing.JLabel();
        jLabelNotificaciones = new javax.swing.JLabel();
        jPanelHeader = new javax.swing.JPanel();
        jLabelHeader = new javax.swing.JLabel();
        jLabelCerrar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanelMenu.setBackground(new java.awt.Color(0, 107, 196));
        jPanelMenu.setPreferredSize(new java.awt.Dimension(95, 403));

        javax.swing.GroupLayout jPanelMenuLayout = new javax.swing.GroupLayout(jPanelMenu);
        jPanelMenu.setLayout(jPanelMenuLayout);
        jPanelMenuLayout.setHorizontalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 315, Short.MAX_VALUE)
        );
        jPanelMenuLayout.setVerticalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanelPrincipal.setBackground(new java.awt.Color(255, 255, 255));
        jPanelPrincipal.setBorder(null);

        jPanelBar.setBackground(new java.awt.Color(0, 76, 140));

        jLabelLogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/herramientas/power-button.png"))); // NOI18N
        jLabelLogOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabelOpciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/herramientas/cogwheel.png"))); // NOI18N
        jLabelOpciones.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabelNotificaciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/herramientas/bell.png"))); // NOI18N
        jLabelNotificaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanelBarLayout = new javax.swing.GroupLayout(jPanelBar);
        jPanelBar.setLayout(jPanelBarLayout);
        jPanelBarLayout.setHorizontalGroup(
            jPanelBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(jPanelBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNotificaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelBarLayout.setVerticalGroup(
            jPanelBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelNotificaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelHeader.setBackground(new java.awt.Color(88, 165, 240));

        jLabelHeader.setBackground(new java.awt.Color(255, 255, 255));
        jLabelHeader.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabelHeader.setForeground(new java.awt.Color(240, 240, 240));
        jLabelHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHeader.setText("Panel De Localizacion");

        jLabelCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/herramientas/close.png"))); // NOI18N
        jLabelCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCerrarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelHeaderLayout = new javax.swing.GroupLayout(jPanelHeader);
        jPanelHeader.setLayout(jPanelHeaderLayout);
        jPanelHeaderLayout.setHorizontalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHeaderLayout.createSequentialGroup()
                .addContainerGap(1033, Short.MAX_VALUE)
                .addComponent(jLabelCerrar)
                .addContainerGap())
            .addComponent(jLabelHeader, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelHeaderLayout.setVerticalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCerrar)
                .addGap(32, 32, 32)
                .addComponent(jLabelHeader)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelBar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelPrincipal)
                    .addComponent(jPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
            .addComponent(jPanelBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCerrarMouseClicked
        cerrarApp();
    }//GEN-LAST:event_jLabelCerrarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        /* Create and display the form */
        System.out.println(UIManager.getLookAndFeel());
        Principal p = new Principal();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCerrar;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JLabel jLabelLogOut;
    private javax.swing.JLabel jLabelNotificaciones;
    private javax.swing.JLabel jLabelOpciones;
    private javax.swing.JPanel jPanelBar;
    private javax.swing.JPanel jPanelHeader;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JScrollPane jPanelPrincipal;
    // End of variables declaration//GEN-END:variables


    private void irAPrincipal() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelPrincipal = new PanelPrincipal(this);
        //agregarPanelAVentana(panelPrincipal, "", 506, 304);
        ventanaDialog = new VentanaDialog(this, panelPrincipal, "Inicio de Sesion", false, true, true, DO_NOTHING_ON_CLOSE);    
    }
    
    private void agregarPanelAVentana(JPanel panel, String seccion, String titulo, int width, int height) {
        /*this.add(panel);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setTitle(titulo);
        this.setVisible(true);*/
        panel.setSize(width, height);
        panel.setLocation(0,0);
        
        this.jPanelPrincipal.add(panel/*, BorderLayout.CENTER*/);
        this.jPanelPrincipal.revalidate();
        this.jPanelPrincipal.repaint();
        this.jPanelPrincipal.setSize(width,height);
        this.jPanelPrincipal.setPreferredSize(new Dimension(width, height));
        
        this.jPanelMenu.setPreferredSize(new Dimension(this.jPanelMenu.getWidth(), height));
        
        this.pack();
        this.setLocationRelativeTo(null);
        this.setTitle(titulo);
        this.jLabelHeader.setText(seccion + " - " + titulo);
        this.setVisible(true);
    }
    
    /**
    * Este metodo se encarga de inicializar el Dialog, lo destruye en caso de que exista y remieve todos los paneles que lo contienen
    */
    private void iniciarDialog() {
        if (ventanaDialog != null) {
            cerrarDialog();
        }

        //this.setVisible(false);
    }
    /**
    * <p>Metodo que es llamado por <code>iniciarDialog()</code> para la destruccion del dialog
    */

    private void cerrarDialog() {
        ventanaDialog.dispose();
        ventanaDialog = null;

    }
    
    /**
    * Este metodo se encarga de destruir todos los paneles abiertos en el fram principal
    */
    private void limpiarMarcoDePaneles() {
        this.jPanelPrincipal.removeAll();
        //this.setVisible(false);
        if (panelPrincipal != null) {
            remove(panelPrincipal);
            panelPrincipal= null;
        }
        
        if(panelDirectivo != null){
            remove(panelDirectivo);
            panelDirectivo = null;
        }
        
        if(panelDepartamento != null){
            remove(panelDepartamento);
            panelDepartamento = null;
        }
        
        if(panelCursos != null){
            remove(panelCursos);
            panelCursos = null;
        }
        
        if(panelPersonas != null){
            remove(panelPersonas);
            panelPersonas = null;
        }
        
        if(panelAreaMaterias != null){
            remove(panelAreaMaterias);
            panelAreaMaterias = null;
        }
        
        if(panelRutasEstudiantes != null){
            remove(panelRutasEstudiantes);
            panelRutasEstudiantes = null;
        }
        
        if(panelRutas != null){
            remove(panelRutas);
            panelRutas = null;
        }
        
        if(panelEPS != null){
            remove(panelEPS);
            panelEPS = null;
        }
        
        if(panelAcudienteEstudiante != null){
            remove(panelAcudienteEstudiante);
            panelAcudienteEstudiante = null;
        }
        
        if(panelDeudas != null){
            remove(panelDeudas);
            panelDeudas = null;
        }
    }

    public void preguntarAlCerrar(){
        if (JOptionPane.showConfirmDialog(this, "¿Desea salir de la Aplicación?", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_NO_OPTION) {
            //this.guardarTodosLosArchivos();
            System.exit(0);
        } else {
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }

    public void irAEstudiante(String usuario) {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelEstudiante = new PanelEstudiante(this, usuario);
        agregarPanelAVentana(panelEstudiante, "Estudiante", "", 1068, 765);
        iniciarMenu(MENU_ESTUDIANTE, usuario);
    }

    public void irADirectivos(String usuario) {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelDirectivo = new PanelDirectivo(this, usuario);
        agregarPanelAVentana(panelDirectivo, "Directivos", "Dashboard", 1068, 765);
        iniciarMenu(this.MENU_DIRECTIVO, usuario);
    }

    @Override
    public void iniciarMenu(int menu, String usuario) {
        switch(menu){
            case 0:
                //this.limpiarComponentes();
                break;
            case 1:
                //this.cargarComponentesEstudiante();
                break;
            case 2:
                //this.cargarComponentesDocente();
                break;
            case 3:
                //this.cargarComponentesDirectivo();
                menuDirectivo = new MenuDirectivo(this, usuario);
                cargarComponentes(menuDirectivo, MENU_DIRECTIVO_X, MENU_DIRECTIVO_Y);
                break;
            case 4:
                //this.cargarComponentesAcudiente();
                break;
            case 5:
                //this.cargarComponentesPersonal();
                break;
        }
    }

    @Override
    public void cargarComponentes(JPanel menu, int width, int height) {
        menu.setSize(width, height);
        this.jPanelMenu.add(menu,BorderLayout.CENTER);
        
        this.jPanelMenu.revalidate();
        this.jPanelMenu.repaint();
        this.jPanelMenu.setSize(width,height);
        this.jPanelMenu.setPreferredSize(new Dimension(width,height));
        
        this.pack();    
    }

    public void irAPersonas() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelPersonas = new PanelPersonas(this);
        agregarPanelAVentana(panelPersonas, "Directivos","Personas", 1068, 734);
    }
    
    
    public void irARutas() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelRutas = new PanelRutas(this);
        agregarPanelAVentana(panelRutas, "Directivos","Rutas y Transporte", 1068, 734);
    }

    public boolean crearEstudiante(int codigo, int dia, int mes, int anio, String barrio, String localidad, String dir, String nombreEPS, String rh, long documento, String tipo_documento, String primer_nombre, String segundo_nombre, String primer_apellido, String segundo_apellido, int edad, char genero, long telefono, int numCurso, String usuario, String clave) {
        String estadoInscripcion = Estudiante.ESTADO_ACTIVO;
        EPS eps = this.gestionEpsSalud.obtener(nombreEPS);
        Curso curso = this.gestionCursos.buscar(numCurso);
        
        Acudiente[] acudientes = this.gestionPersonas.obtenerAcudientesTemporales();
        Estudiante e = GestionPersonas.agregarEstudiante(codigo, dia, mes, anio, barrio, localidad, dir, rh, estadoInscripcion, eps, documento, tipo_documento, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, edad, genero, telefono, acudientes, curso, usuario, clave);
        this.gestionPersonas.borrarAcudienteTemp();
        return this.gestionPersonas.agregar(e);
    }

    public void irADepartamentos() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelDepartamento = new PanelDepartamentos(this);
        agregarPanelAVentana(panelDepartamento, "Directivos", "Departamentos", 1068, 734);
    }

    private void instanciarControladores() {
        this.gestionPersonas = new GestionPersonas<>();
        this.gestionDepartamento = new GestionDepartamento();
        this.gestionActividades = new GestionActividades();
        this.gestionNotas = new GestionNotas();
        this.gestionCursos = new GestionCursos();
        this.gestionMaterias = new GestionMaterias();
        this.gestionAreas = new GestionArea();
        this.gestionRutas = new GestionRutas();
        this.gestionEpsSalud = new GestionEpsSalud();

    }

    private void ponerFondoDefecto() {
        this.getContentPane().setBackground(new Color(60, 63, 65));
    }

    private void prepararVentana() {
        this.setLocationRelativeTo(null);
        //this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setResizable(false);
        this.setVisible(false);
        //this.setSize(800,600);
        //this.pack();    
    }

    public String[] obtenerEstudiantesPorCodigo() {
        return this.gestionPersonas.obtenerCodigosEstudiantes();
    }

    public String[] obtenerInformacionEstudiante(int codigo) {
        return this.gestionPersonas.obtenerInformacionEstudiante(codigo);
    }

    public boolean crearDepartamento(String nombreDpto, String descripcion, int documento) {
        Persona encargado = this.gestionPersonas.obtener(documento);
        return this.gestionDepartamento.agregar(nombreDpto, descripcion, encargado);
    }

    public String[] cargarDepartamentos() {
        return this.gestionDepartamento.cargarDepartamentos();
    }

    public int obtenerCantidadDepartamentos() {
        return this.gestionDepartamento.obtenerCantidadDepartamentos();
    }

    public boolean buscarDepartamento(String departamento) {
        return this.gestionDepartamento.buscarDepartamento(departamento);
    }

    public boolean buscarCurso(int curso) {
        return this.gestionCursos.buscar(curso) != null;
    }

    public boolean crearCurso(int numCurso, int capacidadMaxima, int grado, long documentoEncargado) {
        Docente docEncargado = (Docente)this.gestionPersonas.obtener(documentoEncargado);
        Materia[] materias = this.gestionMaterias.obtenerMateriasAAgregar();
        if(this.gestionCursos.agregar(numCurso, capacidadMaxima, grado, docEncargado, materias)){
            this.gestionMaterias.limpiarMateriasTemp();
            return true;
        }
        return false;
    }

    public boolean crearMateria(String nombreMateria, long documento) {
        Docente docente = (Docente)this.gestionPersonas.obtener(documento);
        MateriaBase m = this.gestionMaterias.obtenerMateriaBase(nombreMateria);
        Materia materia = this.gestionMaterias.agregarDocenteAMateria(m, docente);
        return this.gestionMaterias.agregarMateriaTemporal(materia);
    }

    public void irACursos() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelCursos = new PanelCursos(this);
        agregarPanelAVentana(panelCursos,"Directivos", "Cursos", 1068, 734);
    }

    public void irAMaterias() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelAreaMaterias = new PanelAreaMateria(this);
        agregarPanelAVentana(panelAreaMaterias,"Directivos", "Áreas y Materias", 1068, 734);
        
    }

    public boolean buscarArea(String nombreArea) {
        return this.gestionAreas.buscarArea(nombreArea);
    }

    public boolean crearArea(String nombreArea, long documento) {
        Docente docente = (Docente)this.gestionPersonas.obtener(documento);
        return this.gestionAreas.agregar(nombreArea, docente);
    }

    public String[] obtenerDirectivos() {
        return this.gestionPersonas.obtenerDirectivos();
    }

    public String[] obtenerDocentes() {
        return this.gestionPersonas.obtenerDocentes();
    }

    public boolean crearDocente(int numero_contrato, double salario, String cargo, String nombreDpto, long documento, String tipo_documento, String primer_nombre, String segundo_nombre, String primer_apellido, String segundo_apellido, int edad, char genero, long telefono, String usuario, String clave) {
        Departamento departamento = this.gestionDepartamento.obtenerDepartamento(nombreDpto);
        Docente d = GestionPersonas.agregarDocente(numero_contrato, salario, departamento, documento, tipo_documento, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, edad, genero, telefono, usuario, clave);
        return this.gestionPersonas.agregar(d);
    }

    public String[] obtenerAreas() {
        return this.gestionAreas.obtenerTodasLasAreas();
    }

    public boolean crearMateriaBase(String nombreMateria, String nombreArea, String descripcion) {
        Area area = this.gestionAreas.obtenerArea(nombreArea);
        return this.gestionMaterias.agregarMateriaBase(nombreMateria, descripcion, area);
    }

    public String[] obtenerMateriasBase() {
        return this.gestionMaterias.obtenerMateriasBase();
    }

    public String[] obtenerMateriasTemp() {
        return this.gestionMaterias.obtenerMateriasTemp();
    }

    public String[] cargarMateriasPorArea(String area) {
        return this.gestionMaterias.cargarMateriasPorArea(area);
    }

    public void irAAgregarAcudientes() {
        iniciarDialog();
        panelAcudienteEstudiante = new PanelAcudienteEstudiante(this);
        this.ventanaDialog = new VentanaDialog(null, panelAcudienteEstudiante, "Agregar Acudientes a estudiante", Dialog.ModalityType.MODELESS, true, true, HIDE_ON_CLOSE);
    }
    
    public void irAPanelRutasEstudiante(String placa) {
        iniciarDialog();
        panelRutasEstudiantes = new PanelRutasEstudiantes(this, placa);
        ventanaDialog = new VentanaDialog(null, panelRutasEstudiantes, "Agregar Estudiantes a ruta", Dialog.ModalityType.MODELESS, true, true, HIDE_ON_CLOSE);
    }

    public void agregarAcudientesTemp(long documento) {
        this.gestionPersonas.agregarAcudienteTemp(documento);
    }

    public String[] obtenerAcudientesTemp() {
        return this.gestionPersonas.obtenerAcudientesTemp();
    }

    public boolean quitarAcudienteTemp(long acudiente) {
        return this.gestionPersonas.quitarAcudienteTemp(acudiente);
    }

    public void ocultarDialog() {
        this.ventanaDialog.setVisible(false);
        
    }

    public int obtenerCantAcudientesTemp() {
        return this.gestionPersonas.obtenerCantAcudientesTemp();
    }

    public String[] obtenerCursos() {
        return this.gestionCursos.obtenerCursos();
    }

    public boolean eliminarMateriaTemporal(String materia) {
        return this.gestionMaterias.eliminarMateriaTemporal(materia);
    }

    public boolean buscarMateriaTemp(String nombreMateria) {
        return this.gestionMaterias.buscarMateriaTemp(nombreMateria);
    }

    public boolean crearAcudiente(String Parentesco, long documento, String tipo_documento, String primer_nombre, String segundo_nombre, String primer_apellido, String segundo_apellido, int edad, char genero, long telefono, String usuario, String clave) {
        int idAcudiente = this.gestionPersonas.obtenerCantidad(GestionPersonas.ACUDIENTE) + 1;
        Acudiente acudiente = GestionPersonas.agregarAcudiente(idAcudiente, Parentesco, documento, tipo_documento, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, edad, genero, telefono, usuario, clave);
        return this.gestionPersonas.agregar(acudiente);
    }

    public String[] obtenerAcudientes() {
        return this.gestionPersonas.obtenerAcudientes();
    }

    public boolean eliminarEstudiante(int codigo) {
        return this.gestionPersonas.borrar(GestionPersonas.ESTUDIANTE, codigo);
    }

    public boolean eliminarAcudiente(int idAcudiente) {
        return this.gestionPersonas.borrar(GestionPersonas.ACUDIENTE, idAcudiente);
    }

    public String[] obtenerAcudientesPorDocumento() {
        return this.gestionPersonas.obtenerAcudientesPorDocumento();
    }

    public String[] obtenerDocentesPorDocumento() {
        return this.gestionPersonas.obtenerDocentesPorDocumento();
    }

    public String[] obtenerDirectivosPorDocumento() {
        return this.gestionPersonas.obtenerDirectivosPorDocumento();
    }

    public boolean existeTrabajadorPorContrato(int numero_contrato) {
        return this.gestionPersonas.existeTrabajadorPorContrato(numero_contrato);
    }

    public boolean eliminarDocente(int numContrato) {
        return this.gestionPersonas.borrar(GestionPersonas.DOCENTE, numContrato);
    }

    public boolean eliminarDirectivo(int numContrato) {
        return this.gestionPersonas.borrar(GestionPersonas.DIRECTIVO, numContrato);
    }

    public boolean eliminarPersonal(int numContrato) {
        return this.gestionPersonas.borrar(GestionPersonas.PERSONAL_SERVICIO, numContrato);
    }

    public boolean existeEstudiantePorCodigo(int codigo) {
        return this.gestionPersonas.existeEstudiantePorCodigo(codigo);
    }

    public boolean buscarRuta(String placa) {
        return this.gestionRutas.buscar(placa);
    }

    public boolean crearRuta(String placa, String localidad, int capacidad, int dia, int mes, int anio) {
        int idRuta = this.gestionRutas.obtenerCantidad() + 1;
        Ruta ruta = GestionRutas.crearRuta(idRuta, placa, localidad, capacidad, dia, mes, anio);
        return this.gestionRutas.agregar(ruta);
    }

    public boolean crearRuta(String placa, String localidad, int capacidad) {
        int idRuta = this.gestionRutas.obtenerCantidad() + 1;
        Ruta ruta = GestionRutas.crearRuta(idRuta, placa, localidad, capacidad);
        return this.gestionRutas.agregar(ruta);
    }

    public String[] obtenerTodasLasRutas() {
        return this.gestionRutas.obtenerTodasLasRutas();
    }

    private void iniciarTimer() {
        Runtime r = Runtime.getRuntime();
        this.timer = new Timer(1000, (ActionEvent e) -> {
            System.out.println("Memoria Libre: " + (double)(r.freeMemory()/1048576));
            System.out.println("Memoria Total: " + (double)(r.totalMemory()/1048576));
        });
        this.timer.start();
    }

    public String[] obtenerEstudiantePorCurso(int curso) {
        return this.gestionPersonas.obtenerEstudiantePorCurso(curso);
    }

    protected int obtenerCantidadPersonas() {
        return this.gestionPersonas.obtenerCantidad();
    }

    public boolean agregarEstudiateARuta(long documento[], String placa) {
        Ruta ruta = this.gestionRutas.obtener(placa);
        return this.gestionPersonas.agregarEstudianteARuta(documento, ruta);
        
    }

    public void irAEps() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelEPS = new PanelEPS(this); 
        agregarPanelAVentana(panelEPS, "Directivo", "EPS y salud estudiantil", 1068, 734);  
    }

    public boolean crearEps(String nombreEPS, long telefono, String barrio, String localidad, String direccion) {
        Direccion dir = new Direccion(barrio, localidad, direccion);
        return this.gestionEpsSalud.agregarEPS(nombreEPS, telefono, dir);
    }

    public boolean existeEps(String nombreEps) {
        return this.gestionEpsSalud.existeEps(nombreEps);
    }

    public String[] obtenerTodasLasEps() {
        return this.gestionEpsSalud.obtenerTodoEPS();
    }

    private void cerrarApp() {
        preguntarAlCerrar();
    }

    private void cargarEstilos() {
        ComboBoxMaterialDesign.crearDisenio();
        TableMaterialDesign.crearDisenio();
        TabbedPaneMaterialDesing.crearDisenio();
        TextPaneMaterialDesign.crearDisenio();
        DialogMaterialDesign.crearDisenio();
        ButtonMaterialDesign.crearDisenio();
        ListMaterialDesign.crearDisenio();
        //JOptionPane.showMessageDialog(null, "Mensaje de prueba", "Prueba", JOptionPane.INFORMATION_MESSAGE);
    }

    public int obtenerCantidadEstudiantes() {
        return this.gestionPersonas.obtenerCantidad(GestionPersonas.ESTUDIANTE);
    }

    public int obtenerCantidadCursos() {
        return this.gestionCursos.obtenerCantidadCursos();
    }

    public int obtenerCantidadRutas() {
        return this.gestionRutas.obtenerCantidad();
    }

    public int obtenerCantidadActividadesMes() {
        return 0;
    }

    public int obtenerCantidadDeudas() {
        return this.gestionPersonas.obtenerCantidadDeudas();
    }

    public int obtenerCantidadEps() {
        return this.gestionEpsSalud.obtenerCantidad();

    }

    public String[][] obtenerTodasLasEps(int columnCount) {
        return this.gestionEpsSalud.obtenerTodoEPS(columnCount);
    }

    public String[][] obtenerDepartamentos(int col) {
        return this.gestionDepartamento.obtenerDepartamentos(col);
    }

    public String[][] cargarMateriasPorArea(String area, int col) {
        return this.gestionMaterias.cargarMateriasPorArea(area, col);
    }

    public String[][] obtenerEstudiantesPorCodigo(int columnas) {
        return this.gestionPersonas.obtenerCodigosEstudiantes(columnas);
    }

    public String[][] obtenerAcudientes(int columnas) {
        return this.gestionPersonas.obtenerAcudientes(columnas);
    }

    public String[][] obtenerDocentes(int columnas) {
        return this.gestionPersonas.obtenerDocentes(columnas);
    }

    public String[][] obtenerDirectivos(int columnas) {
        return this.gestionPersonas.obtenerDirectivos(columnas);
    }

    public String[][] obtenerPersonalServicio(int columnas) {
        return this.gestionPersonas.obtenerPersonalServicio(columnas);

    }

    public boolean existePersona(long documento) {
        return this.gestionPersonas.buscar(documento);
    }

    public boolean agregarDirectivo(int numero_contrato, double salario, String cargo, String nombreDpto, long documento, String tipo_documento, String primer_nombre, String segundo_nombre, String primer_apellido, String segundo_apellido, int edad, char genero, long telefono, String usuario, String clave) {
        Departamento departamento = this.gestionDepartamento.obtenerDepartamento(nombreDpto);
        Directivo directivo = GestionPersonas.agregarDirectivo(numero_contrato, salario, cargo, departamento, documento, tipo_documento, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, edad, genero, telefono, usuario, clave);
        return this.gestionPersonas.agregar(directivo);
    }

    public boolean crearPersonalServicio(int numero_contrato, double salario, String cargo, String nombreDpto, long documento, String tipo_documento, String primer_nombre, String segundo_nombre, String primer_apellido, String segundo_apellido, int edad, char genero, long telefono, String usuario, String clave) {
        Departamento departamento = this.gestionDepartamento.obtenerDepartamento(nombreDpto);
        PersonalServicio personal = GestionPersonas.agregarPersonalServicio(numero_contrato, salario, cargo, departamento, documento, tipo_documento, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, edad, genero, telefono, usuario, clave);
        return this.gestionPersonas.agregar(personal);
    }

    public Object[][] obtenerCursos(int columnas) {
        return this.gestionCursos.obtenerCursos(columnas);
    }

    public String[][] obtenerTodasLasRutas(int columnas) {
        return this.gestionRutas.obtenerTodasLasRutas(columnas);
    }

    public String[] obtenerEPS() {
        return this.gestionEpsSalud.obtenerTodoEPS();
    }

    public String obtenerMateriasDeCurso(int curso) {
        return this.gestionCursos.obtenerMateriasPorCurso(curso);
    }

    public boolean crearDeudaAEstudiante(int documento, double valor, String descripcion) {
        int id = this.gestionPersonas.obtenerCantidadDeudas() + 1;
        Deuda d = new Deuda(valor, descripcion, id);
        return this.gestionPersonas.asignarDeudaAEstudiante(d, documento);
    }

    public String[][] obtenerTodasLasDeudas(int columnas) {
        return this.gestionPersonas.obtenerDeudasDeEstudiantes(columnas);
    }

    public void irAPanelDeudas() {
        iniciarDialog();
        limpiarMarcoDePaneles();
        panelDeudas = new PanelDeudas(this); 
        agregarPanelAVentana(panelDeudas, "Directivo", "Deudas", 1068, 734); 
    }

    public String[][] obtenerPersonasRegistradas(int columnas) {
        return this.gestionPersonas.obtenerPersonasRegistradas(columnas);
    }

    public boolean eliminarRuta(String placa) {
        boolean est = this.gestionPersonas.eliminarRutasDeEstudiantes(placa);
        boolean eliruta = this.gestionRutas.eliminarRuta(placa);
        
        return est && eliruta;
    }

    public int obtenerCantidadDeudasEst(String usuario) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public int obtenerCantidadTrabajosEst(String usuario) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public String[][] obtenerTareasEstudiante(int columnas, String usuario) {
        return this.gestionActividades.obtenerTareasEstudiante(columnas, usuario);
    }



}
